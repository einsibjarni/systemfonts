# Anticonf (tm) script by Jeroen Ooms (2020)
# This script will query 'pkg-config' for the required cflags and ldflags.
# If pkg-config is unavailable or does not find the library, try setting
# INCLUDE_DIR and LIB_DIR manually via e.g:
# R CMD INSTALL --configure-vars='INCLUDE_DIR=/.../include LIB_DIR=/.../lib'

# Library settings
SYS="UNIX"
PKG_CONFIG_NAME="fontconfig freetype2"
PKG_DEB_NAME="libfontconfig1-dev"
PKG_RPM_NAME="fontconfig-devel"
PKG_CSW_NAME="fontconfig_dev"
PKG_BREW_NAME="freetype"
PKG_TEST_HEADER="<fontconfig/fontconfig.h>"
PKG_LIBS="-lfontconfig -lfreetype"
PKG_OBJCXXFLAGS=""

# Alternative config on MacOS for native APIs
if [ `uname` = "Darwin" ]; then
SYS="DARWIN"
PKG_CONFIG_NAME="--static freetype2"
PKG_TEST_HEADER="<ft2build.h>"
PKG_LIBS="-lfreetype"
PKG_OBJCXXFLAGS="-fobjc-arc"

RBIN="${R_HOME}/bin${R_ARCH_BIN}/R"
OBJC=`"$RBIN" CMD config OBJC`
if [ -z "$OBJC" ]; then
  echo "--------------------------- [SYSTEMFONTS] -----------------------------"
  echo "Configuration failed to find an Objective-C compiler."
  echo "  systemfonts require the use of Objective-C code on macOS to access"
  echo "  the system-native font matching API."
  echo "  Please ensure that your build system is setup with an Objective-C"
  echo "  compiler to install systemfonts on macOS"
  echo "-----------------------------------------------------------------------"
  exit 1
fi

fi

# Use pkg-config if available
if [ "`command -v pkg-config`" ]; then
  PKGCONFIG_CFLAGS=`pkg-config --cflags --silence-errors ${PKG_CONFIG_NAME}`
  PKGCONFIG_LIBS=`pkg-config --libs ${PKG_CONFIG_NAME}`
fi

# Note that cflags may be empty in case of success
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
elif [ "$PKGCONFIG_CFLAGS" ] || [ "$PKGCONFIG_LIBS" ]; then
  echo "Found pkg-config cflags and libs!"
  PKG_CFLAGS=${PKGCONFIG_CFLAGS}
  PKG_LIBS=${PKGCONFIG_LIBS}
elif [ `uname` = "Darwin" ]; then
  test ! "$CI" && brew --version 2>/dev/null
  if [ $? -eq 0 ]; then
    BREWDIR=`brew --prefix`
    PKG_CFLAGS="-I$BREWDIR/include -I$BREWDIR/include/freetype2"
  else
    curl -sfL "https://autobrew.github.io/scripts/freetype" > autobrew
    . ./autobrew
  fi
fi

# For debugging
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "Using PKG_LIBS=$PKG_LIBS"

# Find compiler
CC=`${R_HOME}/bin/R CMD config CC`
CFLAGS=`${R_HOME}/bin/R CMD config CFLAGS`
CPPFLAGS=`${R_HOME}/bin/R CMD config CPPFLAGS`

# Test configuration
echo "#include $PKG_TEST_HEADER" | ${CC} ${CPPFLAGS} ${PKG_CFLAGS} ${CFLAGS} -E -xc - >/dev/null 2>configure.log

# Customize the error
if [ $? -ne 0 ]; then
  echo "--------------------------- [ANTICONF] --------------------------------"
  echo "Configuration failed to find the $PKG_CONFIG_NAME library. Try installing:"
  echo " * deb: $PKG_DEB_NAME (Debian, Ubuntu, etc)"
  echo " * rpm: $PKG_RPM_NAME (Fedora, EPEL)"
  echo " * csw: $PKG_CSW_NAME (Solaris)"
  echo " * brew: $PKG_BREW_NAME (OSX)"
  echo "If $PKG_CONFIG_NAME is already installed, check that 'pkg-config' is in your"
  echo "PATH and PKG_CONFIG_PATH contains a $PKG_CONFIG_NAME.pc file. If pkg-config"
  echo "is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "-------------------------- [ERROR MESSAGE] ---------------------------"
  cat configure.log
  echo "--------------------------------------------------------------------"
  exit 1
fi

# Write to Makevars
sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" -e "s|@SYS@|$SYS|g" -e "s|@objcflags@|$PKG_OBJCXXFLAGS|" src/Makevars.in > src/Makevars

# Success
exit 0
